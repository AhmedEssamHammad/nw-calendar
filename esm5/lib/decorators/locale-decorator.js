/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} target
 * @param {?} prop
 * @return {?}
 */
export default function locale(target, prop) {
    /** @type {?} */
    var validLocales = ['en', 'af', 'ar-dz', 'ar-kw', 'ar-ly', 'ar-ma', 'ar-sa', 'ar-tn', 'ar', 'az', 'be',
        'bg', 'bm', 'bn', 'bo', 'br', 'bs', 'ca', 'cs', 'cv', 'cy', 'da', 'de-at', 'de-ch', 'de', 'dv', 'el',
        'en-au', 'en-ca', 'en-gb', 'en-ie', 'en-nz', 'eo', 'es-do', 'es-us', 'es', 'et', 'eu', 'fa', 'fi',
        'fo', 'fr-ca', 'fr-ch', 'fr', 'fy', 'gd', 'gl', 'gom-latn', 'gu', 'he', 'hi', 'hr', 'hu', 'hy-am',
        'id', 'is', 'it', 'ja', 'jv', 'ka', 'kk', 'km', 'kn', 'ko', 'ky', 'lb', 'lo', 'lt', 'lv', 'me',
        'mi', 'mk', 'ml', 'mr', 'ms-my', 'ms', 'mt', 'my', 'nb', 'ne', 'nl-be', 'nl', 'nn', 'pa-in', 'pl',
        'pt-br', 'pt', 'ro', 'ru', 'sd', 'se', 'si', 'sk', 'sl', 'sq', 'sr-cyrl', 'sr', 'ss', 'sv', 'sw',
        'ta', 'te', 'tet', 'th', 'tl-ph', 'tlh', 'tr', 'tzl', 'tzm-latn', 'tzm', 'uk', 'ur', 'uz-latn', 'uz',
        'vi', 'x-pseudo', 'yo', 'zh-cn', 'zh-hk', 'zh-tw'];
    /** @type {?} */
    var NG_ON_ONIT_NAME = 'ngOnInit';
    /**
     * ngOnInit might not be implemented by this component
     * @type {?}
     */
    var ngOnInitClone = target[NG_ON_ONIT_NAME];
    Object.defineProperty(target, NG_ON_ONIT_NAME, {
        value: (/**
         * @return {?}
         */
        function () {
            if (this[prop]) {
                this[prop] = this[prop];
                if (validLocales.indexOf(this[prop]) === -1) {
                    console.error(target.constructor.name +
                        (": " + this[prop] + " is not valid locale value\nvalid values:\nen = English\naf = Afrikaans\nar-dz = Arabic (Algeria)\nar-kw = Arabic (Kuwait)\nar-ly = Arabic (Libya)\nar-ma = Arabic (Morocco)\nar-sa = Arabic (Saudi Arabia)\nar-tn = Arabic (Tunisia)\nar = Arabic\naz = Azerbaijani\nbe = Belarusian\nbg = Bulgarian\nbm = Bambara\nbn = Bengali\nbo = Tibetan\nbr = Breton\nbs = Bosnian\nca = Catalan\ncs = Czech\ncv = Chuvash\ncy = Welsh\nda = Danish\nde-at = German (Austria)\nde-ch = German (Switzerland)\nde = German\ndv = Divehi\nel = Greek\nen-au = English (Australia)\nen-ca = English (Canada)\nen-gb = English (United Kingdom)\nen-ie = English (Ireland)\nen-nz = English (New Zealand)\neo = Esperanto\nes-do = Spanish (Dominican Republic)\nes-us = Spanish (United States)\nes = Spanish\net = Estonian\neu = Basque\nfa = Persian\nfi = Finnish\nfo = Faroese\nfr-ca = French (Canada)\nfr-ch = French (Switzerland)\nfr = French\nfy = Western Frisian\ngd = Scottish Gaelic\ngl = Galician\ngom-latn = gom (Latin)\ngu = Gujarati\nhe = Hebrew\nhi = Hindi\nhr = Croatian\nhu = Hungarian\nhy-am = Armenian (Armenia)\nid = Indonesian\nis = Icelandic\nit = Italian\nja = Japanese\njv = Javanese\nka = Georgian\nkk = Kazakh\nkm = Khmer\nkn = Kannada\nko = Korean\nky = Kirghiz\nlb = Luxembourgish\nlo = Lao\nlt = Lithuanian\nlv = Latvian\nme = me\nmi = Maori\nmk = Macedonian\nml = Malayalam\nmr = Marathi\nms-my = Malay (Malaysia)\nms = Malay\nmt = Maltese\nmy = Burmese\nnb = Norwegian Bokm\u00E5l\nne = Nepali\nnl-be = Dutch (Belgium)\nnl = Dutch\nnn = Norwegian Nynorsk\npa-in = Punjabi (India)\npl = Polish\npt-br = Portuguese (Brazil)\npt = Portuguese\nro = Romanian\nru = Russian\nsd = Sindhi\nse = Northern Sami\nsi = Sinhala\nsk = Slovak\nsl = Slovenian\nsq = Albanian\nsr-cyrl = Serbian (Cyrillic)\nsr = Serbian\nss = Swati\nsv = Swedish\nsw = Swahili\nta = Tamil\nte = Telugu\ntet = Tetum\nth = Thai\ntl-ph = Tagalog (Philippines)\ntlh = Klingon\ntr = Turkish\ntzl = tzl\ntzm-latn = tzm (Latin)\ntzm = tzm\nuk = Ukrainian\nur = Urdu\nuz-latn = Uzbek (Latin)\nuz = Uzbek\nvi = Vietnamese\nx-pseudo = x-pseudo\nyo = Yoruba\nzh-cn = Chinese (China)\nzh-hk = Chinese (Hong Kong SAR China)\nzh-tw = Chinese (Taiwan)"));
                    this[prop] = 'en-us';
                }
            }
            else {
                this[prop] = 'en-us';
            }
            // Calling the original ngOnInit with its original context
            if (ngOnInitClone) {
                ngOnInitClone.call(this);
            }
        })
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxlLWRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL253LWNhbGVuZGFyLyIsInNvdXJjZXMiOlsibGliL2RlY29yYXRvcnMvbG9jYWxlLWRlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxNQUFNLENBQUMsT0FBTyxVQUFVLE1BQU0sQ0FBQyxNQUFXLEVBQUUsSUFBWTs7UUFFaEQsWUFBWSxHQUFHLENBQUMsSUFBSSxFQUFHLElBQUksRUFBRyxPQUFPLEVBQUcsT0FBTyxFQUFHLE9BQU8sRUFBRyxPQUFPLEVBQUcsT0FBTyxFQUFHLE9BQU8sRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUk7UUFDaEgsSUFBSSxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxPQUFPLEVBQUcsT0FBTyxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSTtRQUNuSCxPQUFPLEVBQUcsT0FBTyxFQUFHLE9BQU8sRUFBRyxPQUFPLEVBQUcsT0FBTyxFQUFFLElBQUksRUFBRyxPQUFPLEVBQUcsT0FBTyxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxJQUFJO1FBQzVHLElBQUksRUFBRyxPQUFPLEVBQUcsT0FBTyxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxVQUFVLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxPQUFPO1FBQzdHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUk7UUFDN0csSUFBSSxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLE9BQU8sRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLE9BQU8sRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLE9BQU8sRUFBRyxJQUFJO1FBQzlHLE9BQU8sRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxTQUFTLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxJQUFJLEVBQUcsSUFBSTtRQUM3RyxJQUFJLEVBQUcsSUFBSSxFQUFHLEtBQUssRUFBRyxJQUFJLEVBQUcsT0FBTyxFQUFHLEtBQUssRUFBRyxJQUFJLEVBQUcsS0FBSyxFQUFFLFVBQVUsRUFBRyxLQUFLLEVBQUcsSUFBSSxFQUFHLElBQUksRUFBRyxTQUFTLEVBQUcsSUFBSTtRQUNoSCxJQUFJLEVBQUcsVUFBVSxFQUFHLElBQUksRUFBRyxPQUFPLEVBQUcsT0FBTyxFQUFHLE9BQU8sQ0FBQzs7UUFDbkQsZUFBZSxHQUFHLFVBQVU7Ozs7O1FBRzVCLGFBQWEsR0FBa0IsTUFBTSxDQUFDLGVBQWUsQ0FBQztJQUU1RCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxlQUFlLEVBQUU7UUFDN0MsS0FBSzs7O1FBQUU7WUFDTCxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN4QixJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7b0JBQzNDLE9BQU8sQ0FBQyxLQUFLLENBQ1gsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJO3lCQUNuQyxPQUFLLElBQUksQ0FBQyxJQUFJLENBQUMscXBFQXdIVSxDQUFBLENBQ2QsQ0FBQztvQkFDRixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDO2lCQUN0QjthQUNGO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxPQUFPLENBQUM7YUFDdEI7WUFDRCwwREFBMEQ7WUFDMUQsSUFBSyxhQUFhLEVBQUc7Z0JBQ25CLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDMUI7UUFDSCxDQUFDLENBQUE7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9jYWxlKHRhcmdldDogYW55LCBwcm9wOiBzdHJpbmcpIHtcclxuXHJcbiAgY29uc3QgdmFsaWRMb2NhbGVzID0gWydlbicgLCAnYWYnICwgJ2FyLWR6JyAsICdhci1rdycgLCAnYXItbHknICwgJ2FyLW1hJyAsICdhci1zYScgLCAnYXItdG4nICwgJ2FyJyAsICdheicgLCAnYmUnICxcclxuICAgICdiZycgLCAnYm0nICwgJ2JuJyAsICdibycgLCAnYnInICwgJ2JzJyAsICdjYScgLCAnY3MnICwgJ2N2JyAsICdjeScgLCAnZGEnICwgJ2RlLWF0JyAsICdkZS1jaCcgLCAnZGUnICwgJ2R2JyAsICdlbCcgLFxyXG4gICAgJ2VuLWF1JyAsICdlbi1jYScgLCAnZW4tZ2InICwgJ2VuLWllJyAsICdlbi1ueicsICdlbycgLCAnZXMtZG8nICwgJ2VzLXVzJyAsICdlcycgLCAnZXQnICwgJ2V1JyAsICdmYScgLCAnZmknICxcclxuICAgICdmbycgLCAnZnItY2EnICwgJ2ZyLWNoJyAsICdmcicgLCAnZnknICwgJ2dkJyAsICdnbCcgLCAnZ29tLWxhdG4nICwgJ2d1JyAsICdoZScsICdoaScgLCAnaHInICwgJ2h1JyAsICdoeS1hbScgLFxyXG4gICAgJ2lkJyAsICdpcycgLCAnaXQnICwgJ2phJyAsICdqdicgLCAna2EnICwgJ2trJyAsICdrbScgLCAna24nICwgJ2tvJyAsICdreScgLCAnbGInICwgJ2xvJyAsICdsdCcgLCAnbHYnICwgJ21lJyAsXHJcbiAgICAnbWknLCAnbWsnICwgJ21sJyAsICdtcicgLCAnbXMtbXknICwgJ21zJyAsICdtdCcgLCAnbXknICwgJ25iJyAsICduZScgLCAnbmwtYmUnICwgJ25sJyAsICdubicgLCAncGEtaW4nICwgJ3BsJyAsXHJcbiAgICAncHQtYnInICwgJ3B0JyAsICdybycgLCAncnUnICwgJ3NkJywgJ3NlJyAsICdzaScgLCAnc2snICwgJ3NsJyAsICdzcScgLCAnc3ItY3lybCcgLCAnc3InICwgJ3NzJyAsICdzdicgLCAnc3cnICxcclxuICAgICd0YScgLCAndGUnICwgJ3RldCcgLCAndGgnICwgJ3RsLXBoJyAsICd0bGgnICwgJ3RyJyAsICd0emwnLCAndHptLWxhdG4nICwgJ3R6bScgLCAndWsnICwgJ3VyJyAsICd1ei1sYXRuJyAsICd1eicgLFxyXG4gICAgJ3ZpJyAsICd4LXBzZXVkbycgLCAneW8nICwgJ3poLWNuJyAsICd6aC1oaycgLCAnemgtdHcnXTtcclxuICBjb25zdCBOR19PTl9PTklUX05BTUUgPSAnbmdPbkluaXQnO1xyXG5cclxuICAvKiogbmdPbkluaXQgbWlnaHQgbm90IGJlIGltcGxlbWVudGVkIGJ5IHRoaXMgY29tcG9uZW50ICovXHJcbiAgY29uc3QgbmdPbkluaXRDbG9uZTogRnVuY3Rpb258bnVsbCA9IHRhcmdldFtOR19PTl9PTklUX05BTUVdO1xyXG5cclxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBOR19PTl9PTklUX05BTUUsIHtcclxuICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXNbcHJvcF0pIHtcclxuICAgICAgICB0aGlzW3Byb3BdID0gdGhpc1twcm9wXTtcclxuICAgICAgICBpZiAodmFsaWRMb2NhbGVzLmluZGV4T2YodGhpc1twcm9wXSkgPT09IC0xKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgICB0YXJnZXQuY29uc3RydWN0b3IubmFtZSArXHJcbmA6ICR7dGhpc1twcm9wXX0gaXMgbm90IHZhbGlkIGxvY2FsZSB2YWx1ZVxcbnZhbGlkIHZhbHVlczpcclxuZW4gPSBFbmdsaXNoXHJcbmFmID0gQWZyaWthYW5zXHJcbmFyLWR6ID0gQXJhYmljIChBbGdlcmlhKVxyXG5hci1rdyA9IEFyYWJpYyAoS3V3YWl0KVxyXG5hci1seSA9IEFyYWJpYyAoTGlieWEpXHJcbmFyLW1hID0gQXJhYmljIChNb3JvY2NvKVxyXG5hci1zYSA9IEFyYWJpYyAoU2F1ZGkgQXJhYmlhKVxyXG5hci10biA9IEFyYWJpYyAoVHVuaXNpYSlcclxuYXIgPSBBcmFiaWNcclxuYXogPSBBemVyYmFpamFuaVxyXG5iZSA9IEJlbGFydXNpYW5cclxuYmcgPSBCdWxnYXJpYW5cclxuYm0gPSBCYW1iYXJhXHJcbmJuID0gQmVuZ2FsaVxyXG5ibyA9IFRpYmV0YW5cclxuYnIgPSBCcmV0b25cclxuYnMgPSBCb3NuaWFuXHJcbmNhID0gQ2F0YWxhblxyXG5jcyA9IEN6ZWNoXHJcbmN2ID0gQ2h1dmFzaFxyXG5jeSA9IFdlbHNoXHJcbmRhID0gRGFuaXNoXHJcbmRlLWF0ID0gR2VybWFuIChBdXN0cmlhKVxyXG5kZS1jaCA9IEdlcm1hbiAoU3dpdHplcmxhbmQpXHJcbmRlID0gR2VybWFuXHJcbmR2ID0gRGl2ZWhpXHJcbmVsID0gR3JlZWtcclxuZW4tYXUgPSBFbmdsaXNoIChBdXN0cmFsaWEpXHJcbmVuLWNhID0gRW5nbGlzaCAoQ2FuYWRhKVxyXG5lbi1nYiA9IEVuZ2xpc2ggKFVuaXRlZCBLaW5nZG9tKVxyXG5lbi1pZSA9IEVuZ2xpc2ggKElyZWxhbmQpXHJcbmVuLW56ID0gRW5nbGlzaCAoTmV3IFplYWxhbmQpXHJcbmVvID0gRXNwZXJhbnRvXHJcbmVzLWRvID0gU3BhbmlzaCAoRG9taW5pY2FuIFJlcHVibGljKVxyXG5lcy11cyA9IFNwYW5pc2ggKFVuaXRlZCBTdGF0ZXMpXHJcbmVzID0gU3BhbmlzaFxyXG5ldCA9IEVzdG9uaWFuXHJcbmV1ID0gQmFzcXVlXHJcbmZhID0gUGVyc2lhblxyXG5maSA9IEZpbm5pc2hcclxuZm8gPSBGYXJvZXNlXHJcbmZyLWNhID0gRnJlbmNoIChDYW5hZGEpXHJcbmZyLWNoID0gRnJlbmNoIChTd2l0emVybGFuZClcclxuZnIgPSBGcmVuY2hcclxuZnkgPSBXZXN0ZXJuIEZyaXNpYW5cclxuZ2QgPSBTY290dGlzaCBHYWVsaWNcclxuZ2wgPSBHYWxpY2lhblxyXG5nb20tbGF0biA9IGdvbSAoTGF0aW4pXHJcbmd1ID0gR3VqYXJhdGlcclxuaGUgPSBIZWJyZXdcclxuaGkgPSBIaW5kaVxyXG5ociA9IENyb2F0aWFuXHJcbmh1ID0gSHVuZ2FyaWFuXHJcbmh5LWFtID0gQXJtZW5pYW4gKEFybWVuaWEpXHJcbmlkID0gSW5kb25lc2lhblxyXG5pcyA9IEljZWxhbmRpY1xyXG5pdCA9IEl0YWxpYW5cclxuamEgPSBKYXBhbmVzZVxyXG5qdiA9IEphdmFuZXNlXHJcbmthID0gR2VvcmdpYW5cclxua2sgPSBLYXpha2hcclxua20gPSBLaG1lclxyXG5rbiA9IEthbm5hZGFcclxua28gPSBLb3JlYW5cclxua3kgPSBLaXJnaGl6XHJcbmxiID0gTHV4ZW1ib3VyZ2lzaFxyXG5sbyA9IExhb1xyXG5sdCA9IExpdGh1YW5pYW5cclxubHYgPSBMYXR2aWFuXHJcbm1lID0gbWVcclxubWkgPSBNYW9yaVxyXG5tayA9IE1hY2Vkb25pYW5cclxubWwgPSBNYWxheWFsYW1cclxubXIgPSBNYXJhdGhpXHJcbm1zLW15ID0gTWFsYXkgKE1hbGF5c2lhKVxyXG5tcyA9IE1hbGF5XHJcbm10ID0gTWFsdGVzZVxyXG5teSA9IEJ1cm1lc2VcclxubmIgPSBOb3J3ZWdpYW4gQm9rbcOlbFxyXG5uZSA9IE5lcGFsaVxyXG5ubC1iZSA9IER1dGNoIChCZWxnaXVtKVxyXG5ubCA9IER1dGNoXHJcbm5uID0gTm9yd2VnaWFuIE55bm9yc2tcclxucGEtaW4gPSBQdW5qYWJpIChJbmRpYSlcclxucGwgPSBQb2xpc2hcclxucHQtYnIgPSBQb3J0dWd1ZXNlIChCcmF6aWwpXHJcbnB0ID0gUG9ydHVndWVzZVxyXG5ybyA9IFJvbWFuaWFuXHJcbnJ1ID0gUnVzc2lhblxyXG5zZCA9IFNpbmRoaVxyXG5zZSA9IE5vcnRoZXJuIFNhbWlcclxuc2kgPSBTaW5oYWxhXHJcbnNrID0gU2xvdmFrXHJcbnNsID0gU2xvdmVuaWFuXHJcbnNxID0gQWxiYW5pYW5cclxuc3ItY3lybCA9IFNlcmJpYW4gKEN5cmlsbGljKVxyXG5zciA9IFNlcmJpYW5cclxuc3MgPSBTd2F0aVxyXG5zdiA9IFN3ZWRpc2hcclxuc3cgPSBTd2FoaWxpXHJcbnRhID0gVGFtaWxcclxudGUgPSBUZWx1Z3VcclxudGV0ID0gVGV0dW1cclxudGggPSBUaGFpXHJcbnRsLXBoID0gVGFnYWxvZyAoUGhpbGlwcGluZXMpXHJcbnRsaCA9IEtsaW5nb25cclxudHIgPSBUdXJraXNoXHJcbnR6bCA9IHR6bFxyXG50em0tbGF0biA9IHR6bSAoTGF0aW4pXHJcbnR6bSA9IHR6bVxyXG51ayA9IFVrcmFpbmlhblxyXG51ciA9IFVyZHVcclxudXotbGF0biA9IFV6YmVrIChMYXRpbilcclxudXogPSBVemJla1xyXG52aSA9IFZpZXRuYW1lc2VcclxueC1wc2V1ZG8gPSB4LXBzZXVkb1xyXG55byA9IFlvcnViYVxyXG56aC1jbiA9IENoaW5lc2UgKENoaW5hKVxyXG56aC1oayA9IENoaW5lc2UgKEhvbmcgS29uZyBTQVIgQ2hpbmEpXHJcbnpoLXR3ID0gQ2hpbmVzZSAoVGFpd2FuKWBcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICB0aGlzW3Byb3BdID0gJ2VuLXVzJztcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpc1twcm9wXSA9ICdlbi11cyc7XHJcbiAgICAgIH1cclxuICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgbmdPbkluaXQgd2l0aCBpdHMgb3JpZ2luYWwgY29udGV4dFxyXG4gICAgICBpZiAoIG5nT25Jbml0Q2xvbmUgKSB7XHJcbiAgICAgICAgbmdPbkluaXRDbG9uZS5jYWxsKHRoaXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuIl19